const { Pool } = require('pg')

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
})

async function checkClicks() {
  try {
    // V√©rifier les clics sur les multiLinks
    const multiLinkClicks = await pool.query(`
      SELECT ml.title, ml.clicks, ml."parentLinkId"
      FROM multi_links ml
      ORDER BY ml.clicks DESC
    `)

    console.log('\nüìä Clics sur les multiLinks:')
    if (multiLinkClicks.rows.length === 0) {
      console.log('‚ùå Aucun multiLink trouv√©')
    } else {
      multiLinkClicks.rows.forEach((ml, i) => {
        console.log(`${i + 1}. ${ml.title} - ${ml.clicks} clics`)
      })
    }

    // V√©rifier les √©v√©nements de clics dans la table clicks
    const clickEvents = await pool.query(`
      SELECT COUNT(*) as total, "linkId", "multiLinkId"
      FROM clicks
      GROUP BY "linkId", "multiLinkId"
    `)

    console.log('\nüìà √âv√©nements de clics enregistr√©s:')
    if (clickEvents.rows.length === 0) {
      console.log('‚ùå Aucun √©v√©nement de clic enregistr√©')
    } else {
      console.log(`‚úÖ ${clickEvents.rows.length} √©v√©nement(s) de clic`)
      clickEvents.rows.forEach((event, i) => {
        console.log(`${i + 1}. LinkId: ${event.linkId}, MultiLinkId: ${event.multiLinkId || 'N/A'}, Total: ${event.total}`)
      })
    }

    await pool.end()
    process.exit(0)
  } catch (error) {
    console.error('‚ùå Erreur:', error.message)
    process.exit(1)
  }
}

checkClicks()
