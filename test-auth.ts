import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const prisma = new PrismaClient();

async function testAuth() {
  console.log('üîê TEST D\'AUTHENTIFICATION COMPLET\n');
  console.log('='.repeat(50));
  
  const testAccounts = [
    { email: 'admin@taplinkr.com', password: 'Admin123!' },
    { email: 'florentivo95270@gmail.com', password: 'Admin123!' }
  ];
  
  for (const account of testAccounts) {
    console.log(`\nüìß Test du compte: ${account.email}`);
    
    try {
      // 1. R√©cup√©rer l'utilisateur
      const user = await prisma.user.findUnique({
        where: { email: account.email }
      });
      
      if (!user) {
        console.log('   ‚ùå Utilisateur introuvable dans la base de donn√©es');
        continue;
      }
      
      console.log('   ‚úÖ Utilisateur trouv√©');
      console.log(`   - Role: ${user.role}`);
      console.log(`   - Email v√©rifi√©: ${user.emailVerified ? '‚úÖ' : '‚ùå'}`);
      
      // 2. V√©rifier le mot de passe
      if (!user.password) {
        console.log('   ‚ùå L\'utilisateur n\'a pas de mot de passe');
        continue;
      }
      
      const isPasswordValid = await bcrypt.compare(account.password, user.password);
      console.log(`   - Mot de passe valide: ${isPasswordValid ? '‚úÖ' : '‚ùå'}`);
      
      if (!isPasswordValid) {
        console.log('   üí° Le hash du mot de passe ne correspond pas');
        console.log(`   Hash actuel: ${user.password.substring(0, 20)}...`);
        
        // G√©n√©rer un nouveau hash pour comparaison
        const newHash = await bcrypt.hash(account.password, 10);
        console.log(`   Nouveau hash sugg√©r√©: ${newHash.substring(0, 20)}...`);
      }
      
      // 3. V√©rifier les conditions d'authentification
      if (user.emailVerified && isPasswordValid) {
        console.log('   ‚úÖ AUTHENTIFICATION R√âUSSIE !');
      } else {
        console.log('   ‚ùå AUTHENTIFICATION √âCHOU√âE');
        if (!user.emailVerified) {
          console.log('      - Email non v√©rifi√©');
        }
        if (!isPasswordValid) {
          console.log('      - Mot de passe incorrect');
        }
      }
      
    } catch (error: any) {
      console.log('   ‚ùå Erreur:', error.message);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('\nüí° V√âRIFICATION DE LA CONFIGURATION NEXTAUTH:');
  console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL || '‚ùå Non d√©fini');
  console.log('NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? '‚úÖ D√©fini' : '‚ùå Non d√©fini');
  
  await prisma.$disconnect();
}

testAuth().catch(console.error);