generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  username                String                  @unique
  name                    String?
  image                   String?
  bio                     String?
  bannerImage             String?
  role                    String                  @default("user")
  plan                    String                  @default("free")
  planExpiresAt           DateTime?
  stripeCustomerId        String?                 @unique
  stripeSubscriptionId    String?                 @unique
  teamId                  String?
  teamRole                String?                 @default("member")
  emailVerified           Boolean                 @default(false)
  emailVerificationToken  String?                 @unique
  emailVerificationExpiry DateTime?
  banned                  Boolean                 @default(false)
  bannedAt                DateTime?
  bannedReason            String?
  sessionVersion          Int                     @default(0)
  theme                   String                  @default("gradient")
  primaryColor            String                  @default("#3b82f6")
  secondaryColor          String                  @default("#8b5cf6")
  backgroundImage         String?
  avatarId                String?
  bannerId                String?
  twitterUrl              String?
  instagramUrl            String?
  linkedinUrl             String?
  youtubeUrl              String?
  tiktokUrl               String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  analyticsEvents         AnalyticsEvent[]
  analyticsSummary        AnalyticsSummary[]
  clicks                  Click[]
  customDomains           CustomDomain[]
  files                   File[]
  folders                 Folder[]
  linkSchedules           LinkSchedule[]
  links                   Link[]
  originalLinks           Link[]                  @relation("OriginalOwner")
  modifiedLinks           Link[]                  @relation("LastModifier")
  assignedLinks           Link[]                  @relation("AssignedLinks")
  notificationPreferences NotificationPreference?
  notifications           Notification[]
  passwordProtections     PasswordProtection[]
  pushSubscriptions       PushSubscription[]
  templates               Template[]
  userProfile             UserProfile?
  userTheme               UserTheme?
  avatar                  File?                   @relation("UserAvatar", fields: [avatarId], references: [id])
  banner                  File?                   @relation("UserBanner", fields: [bannerId], references: [id])
  team                    Team?                   @relation(fields: [teamId], references: [id])
  ownedTeam               Team?                   @relation("TeamOwner")
  sentInvitations         TeamInvitation[]        @relation("InvitedBy")
  verificationTokens      VerificationToken[]
  teamLinkHistory         TeamLinkHistory[]
  teamAuditLogs           TeamAuditLog[]

  @@map("users")
}

model Link {
  id                 String              @id @default(cuid())
  userId             String
  slug               String              @unique
  title              String
  description        String?
  color              String?
  icon               String?
  coverImage         String?
  coverImagePosition String?
  profileImage       String?
  profileStyle       String?             @default("circle")
  coverId            String?
  fontFamily         String?
  borderRadius       String?
  backgroundColor    String?
  textColor          String?
  animation          String?
  isActive           Boolean             @default(true)
  isDirect           Boolean             @default(false)
  directUrl          String?
  shieldEnabled      Boolean             @default(false)
  isUltraLink        Boolean             @default(false)
  shieldConfig       String?
  isOnline           Boolean             @default(false)
  city               String?
  country            String?
  instagramUrl       String?
  tiktokUrl          String?
  twitterUrl         String?
  youtubeUrl         String?
  order              Int                 @default(0)
  clicks             Int                 @default(0)
  views              Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  folderId           String?
  teamShared         Boolean             @default(false)
  teamId             String?
  originalOwnerId    String?
  lastModifiedBy     String?
  assignedToUserId   String?
  analyticsEvents    AnalyticsEvent[]
  analyticsSummary   AnalyticsSummary[]
  clickEvents        Click[]
  linkSchedule       LinkSchedule?
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cover              File?               @relation("LinkCover", fields: [coverId], references: [id])
  folder             Folder?             @relation(fields: [folderId], references: [id])
  team               Team?               @relation(fields: [teamId], references: [id])
  originalOwner      User?               @relation("OriginalOwner", fields: [originalOwnerId], references: [id])
  lastModifier       User?               @relation("LastModifier", fields: [lastModifiedBy], references: [id])
  assignedTo         User?               @relation("AssignedLinks", fields: [assignedToUserId], references: [id])
  multiLinks         MultiLink[]
  passwordAttempts   PasswordAttempt[]
  passwordProtection PasswordProtection?
  history            TeamLinkHistory[]
  auditLogs          TeamAuditLog[]

  @@index([teamId, teamShared])
  @@index([assignedToUserId])
  @@map("links")
}

model MultiLink {
  id           String   @id @default(cuid())
  parentLinkId String
  title        String
  url          String
  description  String?
  icon         String?
  iconImage    String?
  animation    String?
  order        Int      @default(0)
  clicks       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  parentLink   Link     @relation(fields: [parentLinkId], references: [id], onDelete: Cascade)

  @@map("multi_links")
}

model Click {
  id              String   @id @default(cuid())
  linkId          String
  userId          String
  ip              String?
  userAgent       String?
  referer         String?
  country         String?
  city            String?
  region          String?
  device          String?
  browser         String?
  os              String?
  screenResolution String?
  language        String?
  timezone        String?
  duration        Int?     // Dur√©e de visite en secondes
  multiLinkId     String?  // ID du lien sp√©cifique cliqu√©
  sessionId       String?  // üî• Session ID pour d√©duplication (comme GetMySocial)
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  link            Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([linkId, createdAt])
  @@index([userId, createdAt])
  @@index([linkId, country])
  @@index([ip])
  @@index([multiLinkId, sessionId]) // üî• Index pour d√©duplication rapide
  @@map("clicks")
}

model Folder {
  id               String   @id @default(cuid())
  name             String
  description      String?
  color            String?
  icon             String?
  userId           String
  parentId         String?
  order            Int      @default(0)
  isExpanded       Boolean  @default(true)
  teamShared       Boolean  @default(false)
  teamId           String?
  originalOwnerId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team             Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  parent           Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children         Folder[] @relation("FolderHierarchy")
  links            Link[]

  @@map("folders")
}

model File {
  id                 String     @id @default(cuid())
  filename           String
  originalName       String
  mimeType           String
  size               Int
  url                String
  userId             String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkCovers         Link[]     @relation("LinkCover")
  templateThumbnails Template[] @relation("TemplateThumbnail")
  userAvatars        User[]     @relation("UserAvatar")
  userBanners        User[]     @relation("UserBanner")

  @@map("files")
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  linkId      String
  userId      String
  eventType   String
  ip          String?
  userAgent   String?
  referer     String?
  country     String?
  region      String?
  city        String?
  latitude    Float?
  longitude   Float?
  device      String?
  browser     String?
  os          String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  createdAt   DateTime @default(now())
  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([linkId, createdAt])
  @@index([userId, createdAt])
  @@map("analytics_events")
}

model AnalyticsSummary {
  id         String   @id @default(cuid())
  linkId     String
  userId     String
  date       DateTime
  clicks     Int      @default(0)
  views      Int      @default(0)
  topCountry String?
  topDevice  String?
  topBrowser String?
  topReferer String?
  link       Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([linkId, date])
  @@map("analytics_summary")
}

model Template {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  layout       String
  colors       String
  fonts        String
  spacing      String
  animations   String?
  thumbnailId  String?
  cssCode      String?
  isPremium    Boolean       @default(false)
  isPublic     Boolean       @default(true)
  authorId     String?
  usageCount   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  thumbnail    File?         @relation("TemplateThumbnail", fields: [thumbnailId], references: [id])
  author       User?         @relation(fields: [authorId], references: [id])
  userProfiles UserProfile[]

  @@map("templates")
}

model UserProfile {
  id         String    @id @default(cuid())
  userId     String    @unique
  templateId String?
  customCSS  String?
  layout     String?
  seo        String?
  domain     String?
  favicon    String?
  analytics  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template? @relation(fields: [templateId], references: [id])

  @@map("user_profiles")
}

model UserTheme {
  id          String   @id @default(cuid())
  userId      String   @unique
  preference  String   @default("system")
  customTheme String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_themes")
}

model PasswordProtection {
  id              String    @id @default(cuid())
  linkId          String    @unique
  userId          String
  password        String
  hint            String?
  maxAttempts     Int       @default(5)
  lockoutDuration Int       @default(3600)
  attempts        Int       @default(0)
  lockedUntil     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  link            Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_protections")
}

model PasswordAttempt {
  id        String   @id @default(cuid())
  linkId    String
  ip        String
  success   Boolean
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId, ip, createdAt])
  @@map("password_attempts")
}

model LinkSchedule {
  id             String         @id @default(cuid())
  linkId         String         @unique
  userId         String
  startDate      DateTime?
  endDate        DateTime?
  timezone       String         @default("UTC")
  isRecurring    Boolean        @default(false)
  recurrenceRule String?
  actionOnStart  String?
  actionOnEnd    String?
  notifyStart    Boolean        @default(false)
  notifyEnd      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  link           Link           @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduledJobs  ScheduledJob[]

  @@map("link_schedules")
}

model ScheduledJob {
  id           String       @id @default(cuid())
  scheduleId   String
  jobType      String
  scheduledFor DateTime
  executed     Boolean      @default(false)
  executedAt   DateTime?
  error        String?
  createdAt    DateTime     @default(now())
  schedule     LinkSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduledFor, executed])
  @@map("scheduled_jobs")
}

model CustomDomain {
  id         String    @id @default(cuid())
  userId     String
  domain     String    @unique
  subdomain  String?
  verified   Boolean   @default(false)
  dnsRecords String?
  sslEnabled Boolean   @default(false)
  sslExpiry  DateTime?
  redirectTo String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("custom_domains")
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  type         String
  title        String
  message      String
  data         String?
  read         Boolean   @default(false)
  readAt       DateTime?
  inApp        Boolean   @default(true)
  email        Boolean   @default(false)
  push         Boolean   @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  clickNotifications    Boolean  @default(true)
  scheduleNotifications Boolean  @default(true)
  systemNotifications   Boolean  @default(true)
  marketingEmails       Boolean  @default(false)
  emailEnabled          Boolean  @default(true)
  pushEnabled           Boolean  @default(true)
  smsEnabled            Boolean  @default(false)
  digestFrequency       String   @default("daily")
  quietHours            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  keys      String
  userAgent String?
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

// Team system for Premium users
model Team {
  id              String           @id @default(cuid())
  name            String
  description     String?
  slug            String           @unique
  ownerId         String           @unique
  maxMembers      Int              @default(5)
  brandTheme      String?          // JSON theme settings
  brandAssets     String?          // JSON assets (logos, colors)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  owner           User             @relation("TeamOwner", fields: [ownerId], references: [id])
  members         User[]
  links           Link[]
  folders         Folder[]
  invitations     TeamInvitation[]
  sharedTemplates TeamTemplate[]
  analytics       TeamAnalytics[]
  linkHistory     TeamLinkHistory[]
  auditLogs       TeamAuditLog[]

  @@map("teams")
}

model TeamInvitation {
  id          String            @id @default(cuid())
  teamId      String
  email       String
  role        String            @default("member") // owner, admin, member, viewer
  token       String            @unique
  status      String            @default("pending") // pending, accepted, declined, expired
  invitedById String
  expiresAt   DateTime
  createdAt   DateTime          @default(now())
  acceptedAt  DateTime?
  
  team        Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invitedBy   User              @relation("InvitedBy", fields: [invitedById], references: [id])
  
  @@unique([teamId, email])
  @@map("team_invitations")
}

model TeamTemplate {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  description String?
  template    String   // JSON template data
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("team_templates")
}

model TeamAnalytics {
  id          String   @id @default(cuid())
  teamId      String
  date        DateTime
  totalClicks Int      @default(0)
  totalViews  Int      @default(0)
  members     Int      @default(0)
  data        String?  // JSON analytics data
  createdAt   DateTime @default(now())
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, date])
  @@map("team_analytics")
}

model VerificationToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  type       String   // 'email' or 'password_reset'
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("verification_tokens")
}

model PromoCode {
  id              String   @id @default(cuid())
  code            String   @unique
  description     String?
  discountType    String   // 'percentage' or 'fixed_days'
  discountValue   Int      // percentage (0-100) or days
  validFrom       DateTime @default(now())
  validUntil      DateTime?
  maxUses         Int?     // null = unlimited
  currentUses     Int      @default(0)
  requiredPlan    String?  // null = any plan
  isActive        Boolean  @default(true)
  createdBy       String   // admin who created it
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  promoRedemptions PromoRedemption[]
  
  @@index([code])
  @@map("promo_codes")
}

model PromoRedemption {
  id          String   @id @default(cuid())
  promoCodeId String
  userId      String
  redeemedAt  DateTime @default(now())

  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])

  @@unique([promoCodeId, userId]) // Un utilisateur ne peut utiliser un code qu'une fois
  @@map("promo_redemptions")
}

// Nouveau: Historique des modifications des liens d'√©quipe
model TeamLinkHistory {
  id          String   @id @default(cuid())
  linkId      String
  teamId      String
  userId      String
  action      String   // create, update, delete, share, unshare
  changes     Json?    // JSON des changements
  metadata    Json?    // M√©tadonn√©es suppl√©mentaires
  createdAt   DateTime @default(now())

  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([teamId, createdAt])
  @@index([linkId, createdAt])
  @@map("team_link_history")
}

// Nouveau: Audit trail pour la s√©curit√©
model TeamAuditLog {
  id          String   @id @default(cuid())
  teamId      String
  userId      String
  linkId      String?
  action      String   // permission_change, member_added, member_removed, link_accessed, etc.
  details     Json?    // D√©tails de l'action
  ipAddress   String?
  userAgent   String?
  severity    String   @default("info") // info, warning, error, critical
  createdAt   DateTime @default(now())

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
  link        Link?    @relation(fields: [linkId], references: [id], onDelete: SetNull)

  @@index([teamId, createdAt])
  @@index([userId, createdAt])
  @@index([severity, createdAt])
  @@map("team_audit_logs")
}
